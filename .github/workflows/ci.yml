name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

  test-action:
    name: GitHub Actions Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Init Initial Integration Test Context
        id: test-context
        run: |
          PROJECT_PATH=${{ github.repository }}
          PROJECT_NAME="${PROJECT_PATH##*/}-int-test"
          echo "PROJECT_NAME=${PROJECT_NAME}" >> "$GITHUB_ENV"
          echo -e "Check if the project "${PROJECT_NAME}" already exits, create it if needed."
          project_exist=$(gh repo list --json name --jq ".[] | select(.name | contains(\"${PROJECT_NAME}\")) | .name")
          if [[ -n $project_exist ]]; then
            echo -e "==> The project "${PROJECT_NAME}" already exits."
          else
            echo -e "==> The project "${PROJECT_NAME}" is going to be created."
            gh repo create $PROJECT_NAME --public
            echo -e "==> The project "${PROJECT_NAME}" is created."
          fi
          echo -e "Check if the project does not exits on TestSpace Side."
          http_response=$(curl -o response.txt -w "%{response_code}" --no-progress-meter -X GET -H "Authorization: Token ${TESTSPACE_TOKEN}" "https://fletort.testspace.com/api/projects")
          if [ $http_response != "200" ]; then
            echo -e "${cRED}FATAL: Error when trying to get project list from testspace (${http_response}).${cSTOP}"
            cat response.txt
            exit 1
          fi
          found=$(jq ".[] | select(.source_repo_url==\"https://github.com/${{ github.repository_owner }}/$PROJECT_NAME\")" response.txt)
          if [[ -z "$found" ]]; then
          echo -e "==> The TestSpace Project linked to github project ${PROJECT_NAME} does not exist."
          else
            testspace_project_id=$(jq '.id' <<< $found)
            echo -e "==> The TestSpace Project linked to github project ${PROJECT_NAME} already exits with id $testspace_project_id. -> Delete it."
            http_response=$(curl -o response.txt -w "%{response_code}" --no-progress-meter -X DELETE -H "Authorization: Token ${TESTSPACE_TOKEN}" "https://fletort.testspace.com/api/projects/$testspace_project_id")
            if [ $http_response != "204" ]; then
              echo -e "FATAL: Error when trying to delete the testspace project (${http_response})."
              cat response.txt
              exit 1
            fi
            echo -e "==> The TestSpace Project linked to github project ${PROJECT_NAME} does not exist anymore."
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TESTSPACE_TOKEN: ${{ secrets.TESTSPACE_TOKEN }}

      - name: Test Local Action On a new Project
        id: test-action-new
        uses: ./
        with:
          token: ${{ secrets.TESTSPACE_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ env.PROJECT_NAME }}

      - name: Print Output
        id: output
        run: |
          echo "${{ steps.test-action-new.outputs.id }} - ${{steps.test-action-new.outputs.name }}"

      - name: Test Local Action on an existing Project
        id: test-action-existing
        uses: ./
        with:
          token: ${{ secrets.TESTSPACE_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ env.PROJECT_NAME }}

      - name: Check Than TestSpace project is the same
        run: |
          if [[ ${{ steps.test-action-new.outputs.id }} == ${{steps.test-action-existing.outputs.id }} ]]; then
            exit 0
          else
            exit 1
          fi

      - name: Clean Test Data
        if: always()
        run: |
          http_response=$(curl -o response.txt -w "%{response_code}" --no-progress-meter -X DELETE -H "Authorization: Token ${TESTSPACE_TOKEN}" "https://fletort.testspace.com/api/projects/${{ steps.test-action-new.outputs.id }}")
          if [ $http_response == "204" ]; then
            echo "TestSpace project deleted"
          fi
        env:
          TESTSPACE_TOKEN: ${{ secrets.TESTSPACE_TOKEN }}
